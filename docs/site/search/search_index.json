{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Goldfish-RE Reactive and Embeddable rules engine library written in pure Go!. This rules engine has been thought to trigger automatically an event each time that a condition from your ruleset has been satisfied by some updated fact into a context. The evaluation algorithm is RETE-based with focus on evaluation and memory using a Trie struct to improve its performance. Data types The rule engines expose different data types to work with: String : This is a well known string type Number : A number is a representation of an integer value. In this case is a wrapper for a int64 data type Float : Floats are also numeric types. They represent the decimal numbers implemented as float64 Boolean : The boolean are useful to assert a condition as true or false Date : Represents a time.Time data type Key concepts Fact : A fact is a representatioon of a variable that stores a value. Each fact represents an object's attribute, like User.birthday Each fact only can be defined as one of the supported types: String Number Float Boolean Date Term : A term represents one side of a condition, could be a fact or could be a discrete value. Condition : The condition is a boolean sentence which after its evaluation the result can be true or false . Ex. User.birthday > 1984-10-22 A condition must have a Fact term as left term. Not valid: 2000 >= Trip.miles Valid: Trip.miles <= 2000 Rule : The rule is a collection of conditions under the operator All or Any All: The rule will be valid (true) when all contained conditions are true after its evaluation Any: The rule will be valid (true) when at least one contained condition is true after its evaluation RuleSet : The ruleset is a group of rules defined by the user. The ruleset exposes a context were the facts are registered and evaluated on each rule into the ruleset when a change happens Context : A context groups the facts involved on the rule activation that belongs to a ruleset.","title":"Introduction"},{"location":"index.html#goldfish-re","text":"Reactive and Embeddable rules engine library written in pure Go!. This rules engine has been thought to trigger automatically an event each time that a condition from your ruleset has been satisfied by some updated fact into a context. The evaluation algorithm is RETE-based with focus on evaluation and memory using a Trie struct to improve its performance.","title":"Goldfish-RE"},{"location":"index.html#data-types","text":"The rule engines expose different data types to work with: String : This is a well known string type Number : A number is a representation of an integer value. In this case is a wrapper for a int64 data type Float : Floats are also numeric types. They represent the decimal numbers implemented as float64 Boolean : The boolean are useful to assert a condition as true or false Date : Represents a time.Time data type","title":"Data types"},{"location":"index.html#key-concepts","text":"Fact : A fact is a representatioon of a variable that stores a value. Each fact represents an object's attribute, like User.birthday Each fact only can be defined as one of the supported types: String Number Float Boolean Date Term : A term represents one side of a condition, could be a fact or could be a discrete value. Condition : The condition is a boolean sentence which after its evaluation the result can be true or false . Ex. User.birthday > 1984-10-22 A condition must have a Fact term as left term. Not valid: 2000 >= Trip.miles Valid: Trip.miles <= 2000 Rule : The rule is a collection of conditions under the operator All or Any All: The rule will be valid (true) when all contained conditions are true after its evaluation Any: The rule will be valid (true) when at least one contained condition is true after its evaluation RuleSet : The ruleset is a group of rules defined by the user. The ruleset exposes a context were the facts are registered and evaluated on each rule into the ruleset when a change happens Context : A context groups the facts involved on the rule activation that belongs to a ruleset.","title":"Key concepts"},{"location":"admonition.html","text":"Admonition Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings. Installation Add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - admonition Usage Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: 1 2 3 4 !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: 1 2 3 4 !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Collapsible blocks The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: 1 2 3 4 ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default. Types Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note . Note Example: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso Abstract Example: 1 2 3 4 !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr Info Example: 1 2 3 4 !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo Tip Example: 1 2 3 4 !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important Success Example: 1 2 3 4 !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done Question Example: 1 2 3 4 !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq Warning Example: 1 2 3 4 !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention Failure Example: 1 2 3 4 !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing Danger Example: 1 2 3 4 !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error Bug Example: 1 2 3 4 !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug Example Example: 1 2 3 4 !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet Quote Example: 1 2 3 4 !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Admonition"},{"location":"admonition.html#admonition","text":"Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings.","title":"Admonition"},{"location":"admonition.html#installation","text":"Add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - admonition","title":"Installation"},{"location":"admonition.html#usage","text":"Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"admonition.html#changing-the-title","text":"By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: 1 2 3 4 !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"admonition.html#removing-the-title","text":"Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: 1 2 3 4 !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"admonition.html#embedded-code-blocks","text":"Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded code blocks"},{"location":"admonition.html#collapsible-blocks","text":"The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: 1 2 3 4 ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default.","title":"Collapsible blocks"},{"location":"admonition.html#types","text":"Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note .","title":"Types"},{"location":"admonition.html#note","text":"Example: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso","title":"Note"},{"location":"admonition.html#abstract","text":"Example: 1 2 3 4 !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr","title":"Abstract"},{"location":"admonition.html#info","text":"Example: 1 2 3 4 !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo","title":"Info"},{"location":"admonition.html#tip","text":"Example: 1 2 3 4 !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important","title":"Tip"},{"location":"admonition.html#success","text":"Example: 1 2 3 4 !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done","title":"Success"},{"location":"admonition.html#question","text":"Example: 1 2 3 4 !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq","title":"Question"},{"location":"admonition.html#warning","text":"Example: 1 2 3 4 !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention","title":"Warning"},{"location":"admonition.html#failure","text":"Example: 1 2 3 4 !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing","title":"Failure"},{"location":"admonition.html#danger","text":"Example: 1 2 3 4 !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error","title":"Danger"},{"location":"admonition.html#bug","text":"Example: 1 2 3 4 !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug","title":"Bug"},{"location":"admonition.html#example","text":"Example: 1 2 3 4 !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet","title":"Example"},{"location":"admonition.html#quote","text":"Example: 1 2 3 4 !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Quote"},{"location":"codehilite.html","text":"CodeHilite CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - codehilite Usage Specifying the language The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways. via Markdown syntax recommended In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: 1 2 3 ``` python import tensorflow as tf ``` Result: 1 import tensorflow as tf via Shebang Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 #!/usr/bin/python import tensorflow as tf Result: 1 2 #!/usr/bin/python import tensorflow as tf via three colons If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 :::python import tensorflow as tf Result: 1 2 :::python import tensorflow as tf Adding line numbers Line numbers can be added by enabling the linenums flag in your mkdocs.yml : 1 2 3 markdown_extensions : - codehilite : linenums : true Example: 1 2 3 4 5 6 7 8 ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 7 #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Grouping code blocks The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: 1 2 3 4 5 ``` bash #!/bin/bash echo \"Hello world!\" ``` 1 2 3 4 5 6 7 ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` 1 2 3 4 5 6 7 8 ``` c++ #include <iostream> int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` 1 2 3 4 5 6 7 8 9 ``` c# using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } ``` Result: 1 2 3 #!/bin/bash echo \"Hello world!\" 1 2 3 4 5 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); } 1 2 3 4 5 6 #include <iostream> int main () { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } 1 2 3 4 5 6 7 using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } } Highlighting specific lines Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: 1 2 3 4 5 6 7 8 ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 7 #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Supported languages excerpt CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt. Bash 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $? C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ } C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } C# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); } Clojure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ]) Diff 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js', Docker 1 2 3 4 5 6 7 8 9 10 11 12 13 14 FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ] Elixir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end Erlang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end . F# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle } Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) } HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html > Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[] )( new LinkedList [ 10 ] ); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E > (); if ( ! con [ index ] . contains ( obj )) { con [ index ] . add ( obj ); size ++ ; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E > (); temp . con = ( LinkedList < E >[] )( new LinkedList [ con . length * 2 + 1 ] ); for ( int i = 0 ; i < con . length ; i ++ ) { if ( con [ i ] != null ) for ( E e : con [ i ] ) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } } JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports ); JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... } Julia 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 using MXNet mlp = @mx . chain mx . Variable ( :data ) => mx . FullyConnected ( name = :fc1 , num_hidden = 128 ) => mx . Activation ( name = :relu1 , act_type = :relu ) => mx . FullyConnected ( name = :fc2 , num_hidden = 64 ) => mx . Activation ( name = :relu2 , act_type = :relu ) => mx . FullyConnected ( name = :fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name = :softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider ) Lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" ) MySQL 1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; PHP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } } Protocol Buffers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b ) Ruby 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end XML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag>","title":"CodeHilite"},{"location":"codehilite.html#codehilite","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite"},{"location":"codehilite.html#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - codehilite","title":"Installation"},{"location":"codehilite.html#usage","text":"","title":"Usage"},{"location":"codehilite.html#specifying-the-language","text":"The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways.","title":"Specifying the language"},{"location":"codehilite.html#via-markdown-syntax-recommended","text":"In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: 1 2 3 ``` python import tensorflow as tf ``` Result: 1 import tensorflow as tf","title":"via Markdown syntax recommended"},{"location":"codehilite.html#via-shebang","text":"Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 #!/usr/bin/python import tensorflow as tf Result: 1 2 #!/usr/bin/python import tensorflow as tf","title":"via Shebang"},{"location":"codehilite.html#via-three-colons","text":"If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 :::python import tensorflow as tf Result: 1 2 :::python import tensorflow as tf","title":"via three colons"},{"location":"codehilite.html#adding-line-numbers","text":"Line numbers can be added by enabling the linenums flag in your mkdocs.yml : 1 2 3 markdown_extensions : - codehilite : linenums : true Example: 1 2 3 4 5 6 7 8 ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 7 #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j]","title":"Adding line numbers"},{"location":"codehilite.html#grouping-code-blocks","text":"The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: 1 2 3 4 5 ``` bash #!/bin/bash echo \"Hello world!\" ``` 1 2 3 4 5 6 7 ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` 1 2 3 4 5 6 7 8 ``` c++ #include <iostream> int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` 1 2 3 4 5 6 7 8 9 ``` c# using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } ``` Result: 1 2 3 #!/bin/bash echo \"Hello world!\" 1 2 3 4 5 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); } 1 2 3 4 5 6 #include <iostream> int main () { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } 1 2 3 4 5 6 7 using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } }","title":"Grouping code blocks"},{"location":"codehilite.html#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: 1 2 3 4 5 6 7 8 ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 7 #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j]","title":"Highlighting specific lines"},{"location":"codehilite.html#supported-languages-excerpt","text":"CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt.","title":"Supported languages excerpt"},{"location":"codehilite.html#bash","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $?","title":"Bash"},{"location":"codehilite.html#c","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ }","title":"C"},{"location":"codehilite.html#c_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); }","title":"C++"},{"location":"codehilite.html#c_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); }","title":"C&#35;"},{"location":"codehilite.html#clojure","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ])","title":"Clojure"},{"location":"codehilite.html#diff","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js',","title":"Diff"},{"location":"codehilite.html#docker","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ]","title":"Docker"},{"location":"codehilite.html#elixir","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end","title":"Elixir"},{"location":"codehilite.html#erlang","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end .","title":"Erlang"},{"location":"codehilite.html#f","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle }","title":"F&#35;"},{"location":"codehilite.html#go","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) }","title":"Go"},{"location":"codehilite.html#html","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html >","title":"HTML"},{"location":"codehilite.html#java","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[] )( new LinkedList [ 10 ] ); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E > (); if ( ! con [ index ] . contains ( obj )) { con [ index ] . add ( obj ); size ++ ; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E > (); temp . con = ( LinkedList < E >[] )( new LinkedList [ con . length * 2 + 1 ] ); for ( int i = 0 ; i < con . length ; i ++ ) { if ( con [ i ] != null ) for ( E e : con [ i ] ) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } }","title":"Java"},{"location":"codehilite.html#javascript","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports );","title":"JavaScript"},{"location":"codehilite.html#json","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... }","title":"JSON"},{"location":"codehilite.html#julia","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 using MXNet mlp = @mx . chain mx . Variable ( :data ) => mx . FullyConnected ( name = :fc1 , num_hidden = 128 ) => mx . Activation ( name = :relu1 , act_type = :relu ) => mx . FullyConnected ( name = :fc2 , num_hidden = 64 ) => mx . Activation ( name = :relu2 , act_type = :relu ) => mx . FullyConnected ( name = :fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name = :softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider )","title":"Julia"},{"location":"codehilite.html#lua","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" )","title":"Lua"},{"location":"codehilite.html#mysql","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ;","title":"MySQL"},{"location":"codehilite.html#php","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } }","title":"PHP"},{"location":"codehilite.html#protocol-buffers","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; }","title":"Protocol Buffers"},{"location":"codehilite.html#python","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b )","title":"Python"},{"location":"codehilite.html#ruby","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end","title":"Ruby"},{"location":"codehilite.html#xml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag>","title":"XML"},{"location":"datatypes.html","text":"The data types are the different kind of data that you can use as facts. The rule engines expose different data types to work with: String This is a well known string type Number A number is a representation of an integer value. In this case is a wrapper for a int64 data type Float Floats are also numeric types. They represent the decimal numbers implemented as float64 Boolean The boolean are useful to assert a condition as true or false Date Represents a time.Time data type The library has a set of built-in functions to work with date values easily","title":"Data types"},{"location":"datatypes.html#string","text":"This is a well known string type","title":"String"},{"location":"datatypes.html#number","text":"A number is a representation of an integer value. In this case is a wrapper for a int64 data type","title":"Number"},{"location":"datatypes.html#float","text":"Floats are also numeric types. They represent the decimal numbers implemented as float64","title":"Float"},{"location":"datatypes.html#boolean","text":"The boolean are useful to assert a condition as true or false","title":"Boolean"},{"location":"datatypes.html#date","text":"Represents a time.Time data type The library has a set of built-in functions to work with date values easily","title":"Date"},{"location":"keyconcepts.html","text":"Fact A fact is a representatioon of a variable that stores a value. Each fact represents an object's attribute, like User.birthday Each fact only can be defined as one of the supported types: String Number Float Boolean Date Term A term represents one side of a condition, could be a fact or could be a discrete value. Condition The condition is a boolean sentence which after its evaluation the result can be true or false . Ex. User.birthday > 1984-10-22 A condition must have a Fact term as left term. Invalid: 2000 >= Trip.miles Valid: Trip.miles <= 2000 Rule The rule is a collection of conditions under the operator All or Any All: The rule will be valid (true) when all contained conditions are true after its evaluation Any: The rule will be valid (true) when at least one contained condition is true after its evaluation Ruleset The ruleset is a group of rules defined by the user. The ruleset exposes a context where the facts are registered and evaluated on each rule into the ruleset when a change happens Context A context groups the facts involved on the rule activation that belongs to a ruleset.","title":"Key concepts"},{"location":"keyconcepts.html#fact","text":"A fact is a representatioon of a variable that stores a value. Each fact represents an object's attribute, like User.birthday Each fact only can be defined as one of the supported types: String Number Float Boolean Date","title":"Fact"},{"location":"keyconcepts.html#term","text":"A term represents one side of a condition, could be a fact or could be a discrete value.","title":"Term"},{"location":"keyconcepts.html#condition","text":"The condition is a boolean sentence which after its evaluation the result can be true or false . Ex. User.birthday > 1984-10-22 A condition must have a Fact term as left term. Invalid: 2000 >= Trip.miles Valid: Trip.miles <= 2000","title":"Condition"},{"location":"keyconcepts.html#rule","text":"The rule is a collection of conditions under the operator All or Any All: The rule will be valid (true) when all contained conditions are true after its evaluation Any: The rule will be valid (true) when at least one contained condition is true after its evaluation","title":"Rule"},{"location":"keyconcepts.html#ruleset","text":"The ruleset is a group of rules defined by the user. The ruleset exposes a context where the facts are registered and evaluated on each rule into the ruleset when a change happens","title":"Ruleset"},{"location":"keyconcepts.html#context","text":"A context groups the facts involved on the rule activation that belongs to a ruleset.","title":"Context"},{"location":"limitations.html","text":"Termination rules The supported rules are well known as termination rule because the THEN clause do nothing. Only returns a string that it's passed to the activation handler to identify which rule has been activated. Fact inferation The fact inferation is a useful feature of all rule engines. But this mechanism hides a recursive call to the evaluation method over the same ruleset and sometimes this behavior becomes in a performance problem. In order to mitigate this possible issue the context exposes a method to apply a hard limit to the recursion ( ctx.WithMaxIterations(10) ). This must be set at context creation: 1 2 3 4 5 6 7 8 rs , err := createRuleset () if err != nil { panic ( fmt . Sprintf ( \"rulse cannot be created. Error=%s\" , err )) } // Once that you have the ruleset context, you can inject it everywhere. ctx := rs . Context () ctx . WithMaxIterations ( 10 ) // recursion limit (1) Recursion hard limit set by user. Default value: const maxIterations = 100 Also, the same rule cannot be activated twice if a fact updates matchs again with the previous activated rule to avoid run an infinite loop.","title":"Limitations"},{"location":"limitations.html#termination-rules","text":"The supported rules are well known as termination rule because the THEN clause do nothing. Only returns a string that it's passed to the activation handler to identify which rule has been activated.","title":"Termination rules"},{"location":"limitations.html#fact-inferation","text":"The fact inferation is a useful feature of all rule engines. But this mechanism hides a recursive call to the evaluation method over the same ruleset and sometimes this behavior becomes in a performance problem. In order to mitigate this possible issue the context exposes a method to apply a hard limit to the recursion ( ctx.WithMaxIterations(10) ). This must be set at context creation: 1 2 3 4 5 6 7 8 rs , err := createRuleset () if err != nil { panic ( fmt . Sprintf ( \"rulse cannot be created. Error=%s\" , err )) } // Once that you have the ruleset context, you can inject it everywhere. ctx := rs . Context () ctx . WithMaxIterations ( 10 ) // recursion limit (1) Recursion hard limit set by user. Default value: const maxIterations = 100 Also, the same rule cannot be activated twice if a fact updates matchs again with the previous activated rule to avoid run an infinite loop.","title":"Fact inferation"},{"location":"starthere.html","text":"Installation To install the library into your project please run: 1 go install github.com/darksubmarine/goldfish-re Quick start The library exposes a simple API to create conditions, rules, ruleset, facts and run the evaluation. Ruleset definition The following snippets illustrates how to create a ruleset for the next definition: 1 2 3 4 5 6 7 8 9 10 11 12 13 Ruleset User flyer gold award Rule frequent flyer When User.plan is gold User.miles are greater than 300 Then return ACTIVE_GOLD_AWARD Rule user status update When User.status could be one of active, referred, VIP Then return ACTIVE_GOLD_AWARD_BY_STATUS_CHANGE Termination rules Note that so far the engine only supports termination rules, that means: the THEN part of the rule only can return a string that will be sent to the activation function The code should be written like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( \"fmt\" gre \"github.com/darksubmarine/goldfish-re\" ) func createRuleset () gre . Ruleset { // C1: User.Plan == \"gold\" c1 := gre . Builder (). StringCondition (). Term ( \"User\" , \"plan\" ). Equal ( \"gold\" ). Build () // C2: User.miles > 300 c2 := gre . Builder (). NumberCondition (). Term ( \"User\" , \"miles\" ). GreaterThan ( 300 ). Build () // C3: User.status in [\"active\", \"referred\", \"VIP\"] c3 := gre . Builder (). StringCondition (). Term ( \"User\" , \"status\" ). In ([] string { \"active\" , \"referred\" , \"VIP\" }). Build () var frequentFlyer = gre . Builder (). Rule (). AllOf ( c1 , c2 ). Then ( \"ACTIVE_GOLD_AWARD\" ). Build () var userStatusUpdate = gre . Builder (). Rule (). AllOf ( c3 ). Then ( \"ACTIVE_GOLD_AWARD_BY_STATUS_CHANGE\" ). Build () rs := gre . Builder (). Ruleset (). OnActivation ( func ( then string , ctx gre . Context ) { // Do soomething on activation (1) }). OnError ( func ( err error ) { // handle the error at your convenience (2) }). Build () rs . AddRule ( frequentFlyer ) rs . AddRule ( userStatusUpdate ) return rs } Activation function that receives the then value of the activated rule and the context ctx with all facts. Error handler function receives the error and you can log it or do something else based on it. Activation function This function is a callback function that will be called each time that a rule returns true when a fact or facts are updated. The function receives the then value of the activated rule and a pointer to the evaluated context having available all registered facts and objects into this one. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main import ( \"fmt\" gre \"github.com/darksubmarine/goldfish-re\" ) func yourActivationHandler ( then string , ctx gre . Context ) { switch then { case \"ACTIVE_GOLD_AWARD\" : // do something case \"ACTIVE_GOLD_AWARD_BY_STATUS_CHANGE\" : // do something relate with user status } // iterate over the context all registered facts ctx . ForEach ( func ( fact string , value interface {}) { fmt . Printf ( \"%s=%v\\n\" , fact , value ) // will print User.plan=gold or User.miles=500 or User.status=active }) // get the fact that you would like to work with if usrPlan , ok := ctx . Get ( \"User.plan\" ); ok { switch pln := usrPlan .( type ) { case gre . String : fmt . Println ( \"fact type (string):\" , pln . Value ()) case gre . Number : fmt . Println ( \"fact type (number):\" , pln . Value ()) } } // get the fact's parent object to access it and use other fields that are not facts. if usr , ok := ctx . GetObject ( \"User\" ); ok { fmt . Println ( obj .( * User ). Email ) } } Facts inference Sometimes is needed performing an inference due to a facts change. The given context into the onActivation handler will let you update facts in a thread-safe manner calling the cnotext method Feedback . Please refer to Context section for more details. Error handler If for some reason the evaluation ran into an error this callback function will be called letting you know about the error. 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"fmt\" \"log\" gre \"github.com/darksubmarine/goldfish-re\" ) func errorHandler ( err error ) { // do something with the error log . Println ( err ) } Facts as struct fields Following the previous example we have an object User with 3 fields plan miles and status . Those attributes are the facts and can be defined into your go program as: 1 2 3 4 5 6 7 8 9 package main import gre \"github.com/darksubmarine/goldfish-re\" type User struct { plan gre . String miles gre . Number status gre . String } Where the struct name (User) matches with the fact object and the field name matches with the fact attribute. Also the data type must be set using the Goldfish-RE data types in order to trigger an evaluation each time that a value is updated. Go annotation The library also supports Go tags to configure your facts. The tag must be written as: 1 gre:\"object=User,attribute=plan,value=silver\" where this is useful when you need to specify some custom values: object : defines the object name for the given fact, useful to overwrite the struct name. attribute : sets the attribute name for the given fact if you need a name different to the struct field value : the default value which the fact will be initialized. Possible values String : value=some string value Number : value=234 Float : value=73.2 Boolean : value=true Date : value=1984-12-24T00:00:00 1 2 3 4 5 6 7 8 9 package main import gre \"github.com/darksubmarine/goldfish-re\" type User struct { Plan gre . String `gre:\"attribute=plan,value=silver\"` Miles gre . Number `gre:\"attribute=miles,value=500\"` Status gre . String `gre:\"attribute=status,value=none\"` } Exported fields In order to use the Go tags to configure the facts, is mandatory exporting the fields otherwise the context registration will fail. Context Once that you have a ruleset what do you need is a context to eval your facts against the ruleset. That means: A context is created from a ruleset: rs.Context() Each ruleset has only one context The facts are thread-safe into the same context via ctx.Update method The facts are not thread-safe between different context Register facts In order to run evaluations against the ruleset each time that a Fact is updated, is required to register the facts into a Context. Register methods do not run a ruleset evaluation. Only register the facts with their zero / default values into the context. The evaluation happens when a context.Update is called and the facts are modified via a transaction Tx To do this the Context struct has some methods: Register a full struct ctx.Register(obj interface{}) : This method is the most useful when you have a struct with facts to be registered. Also fetchs the tags and applies its configuration. Returns an error if the registration process fails. For instance: 1 2 3 4 5 6 7 8 9 10 type User struct { Plan gre . String `gre:\"attribute=plan,value=silver\"` Miles gre . Number `gre:\"attribute=miles,value=500\"` Status gre . String `gre:\"attribute=status,value=none\"` } usr := new ( User ) if err := ctx . Register ( usr ); err != nil { // error on registration } Register field by field In addition to the Register method it is possible registering individual field with its data type: RegisterString(object interface{}, attribute String) RegisterNumber(object interface{}, attribute Number) RegisterFloat(object interface{}, attribute Float) RegisterBoolean(object interface{}, attribute Boolean) RegisterDate(object interface{}, attribute Date) For instance: 1 2 3 4 5 6 type User struct { Plan gre . String } usr := User { Plan : gre . NewString ( \"User\" , \"plan\" , \"gold\" )} ctx . RegisterString ( usr , usr . Plan ) Update facts Each time that a fact or facts are updated a ruleset evaluation must be run in order to check if some variation activates any rule. The context object exposes a method to execute fact updates in a thread-safe mode. Each call is a locking call and returns the control when the success function ( onActivation ) has finished. Improving performance To improve performance your success function could be executed as a go routine. Have into account to copy the context facts if you need it because, to avoid degrade performance, are pointers to the main ruleset context. Calling context.Update you can update multiples facts at once in a transactional way and after that the evaluation will be trigger. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import ( gre \"github.com/darksubmarine/goldfish-re\" \"log\" ) func updateFacts () { if err := ctx . Update ( func ( tx * gre . Tx ) { tx . SetString ( usr . Status , \"active\" ) tx . SetNumber ( usr . Miles , 999 ) tx . Error ( errors . New ( \"something was wrong\" )) }); err != nil { log . Println ( err ) } } The ctx.Update executes a function where a tx *gre.Tx is a transaction object and let you perform transactional updates to your facts and exposes a tx.Error method in case that you would like to return a custom error to avoid run the ruleset evaluation. When an error is returned the transaction is not applied that means: fact changes are not updated (committed). If you need updating only one fact, the context object exposes individual methods for each data type. SetString(attribute interface{}, value string) error SetNumber(attribute interface{}, value int64) error SetFloat(attribute interface{}, value float64) error SetBoolean(attribute interface{}, value bool) error SetDate(attribute interface{}, value time.Time) error For instance: 1 2 3 if err := ctx . SetString ( usr . Status , \"VIP\" ); err != nil { log ( err ) } Blocking method The previous methods ( SetString, SetNumber, SetFloat, SetBoolean, SetDate ) are blocking methods that executes into a transaction meaning that in case of error the new value is not applied. Context into onActivation handler The context into the activation handler contains all the previous registered facts, so all facts are accessible to read it or to write it. Also, the parent object to each fact can be accessed via the context. The exposed API methods are described below: Fact Getters: These methods are useful to fetch a fact object given the fact name. Get(fact string) (interface{}, bool) GetString(fact string) (String, error) GetNumber(fact string) (Number, error) GetFloat(fact string) (Float, error) GetBoolean(fact string) (Boolean, error) GetDate(fact string) (Date, error) Iteration over all facts into the context This method is useful when you need to run an iteration over all facts into the context. An iteration function must be provided with 2 parameters: fact which is the fact name like User.plan and its value which in this case is an interface to match with all possible data types. ForEach(fn func(fact string, value interface{})) Parent Object Getter This method fetch the parent object that contains a fact. GetObject(object string) (interface{}, bool) Fact Inference (feedback) Sometimes when we are working with a ruleset where some facts depend on other facts is needed an inference mechanism. In this case we called Feedback due to each feedback will trigger a ruleset re-evaluation. The Feedback function is transactional, thread-safe, and it is called from the context.Update life cycle. If the tx.Error() is executed into the Feedback method the error will be accessible as outcome of context.Update . Feedback(func(tx *Tx)) Advanced example Please check the advanced example app into the goldfish-re repo to see it in action!","title":"Quick Start"},{"location":"starthere.html#installation","text":"To install the library into your project please run: 1 go install github.com/darksubmarine/goldfish-re","title":"Installation"},{"location":"starthere.html#quick-start","text":"The library exposes a simple API to create conditions, rules, ruleset, facts and run the evaluation.","title":"Quick start"},{"location":"starthere.html#ruleset-definition","text":"The following snippets illustrates how to create a ruleset for the next definition: 1 2 3 4 5 6 7 8 9 10 11 12 13 Ruleset User flyer gold award Rule frequent flyer When User.plan is gold User.miles are greater than 300 Then return ACTIVE_GOLD_AWARD Rule user status update When User.status could be one of active, referred, VIP Then return ACTIVE_GOLD_AWARD_BY_STATUS_CHANGE Termination rules Note that so far the engine only supports termination rules, that means: the THEN part of the rule only can return a string that will be sent to the activation function The code should be written like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( \"fmt\" gre \"github.com/darksubmarine/goldfish-re\" ) func createRuleset () gre . Ruleset { // C1: User.Plan == \"gold\" c1 := gre . Builder (). StringCondition (). Term ( \"User\" , \"plan\" ). Equal ( \"gold\" ). Build () // C2: User.miles > 300 c2 := gre . Builder (). NumberCondition (). Term ( \"User\" , \"miles\" ). GreaterThan ( 300 ). Build () // C3: User.status in [\"active\", \"referred\", \"VIP\"] c3 := gre . Builder (). StringCondition (). Term ( \"User\" , \"status\" ). In ([] string { \"active\" , \"referred\" , \"VIP\" }). Build () var frequentFlyer = gre . Builder (). Rule (). AllOf ( c1 , c2 ). Then ( \"ACTIVE_GOLD_AWARD\" ). Build () var userStatusUpdate = gre . Builder (). Rule (). AllOf ( c3 ). Then ( \"ACTIVE_GOLD_AWARD_BY_STATUS_CHANGE\" ). Build () rs := gre . Builder (). Ruleset (). OnActivation ( func ( then string , ctx gre . Context ) { // Do soomething on activation (1) }). OnError ( func ( err error ) { // handle the error at your convenience (2) }). Build () rs . AddRule ( frequentFlyer ) rs . AddRule ( userStatusUpdate ) return rs } Activation function that receives the then value of the activated rule and the context ctx with all facts. Error handler function receives the error and you can log it or do something else based on it.","title":"Ruleset definition"},{"location":"starthere.html#activation-function","text":"This function is a callback function that will be called each time that a rule returns true when a fact or facts are updated. The function receives the then value of the activated rule and a pointer to the evaluated context having available all registered facts and objects into this one. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main import ( \"fmt\" gre \"github.com/darksubmarine/goldfish-re\" ) func yourActivationHandler ( then string , ctx gre . Context ) { switch then { case \"ACTIVE_GOLD_AWARD\" : // do something case \"ACTIVE_GOLD_AWARD_BY_STATUS_CHANGE\" : // do something relate with user status } // iterate over the context all registered facts ctx . ForEach ( func ( fact string , value interface {}) { fmt . Printf ( \"%s=%v\\n\" , fact , value ) // will print User.plan=gold or User.miles=500 or User.status=active }) // get the fact that you would like to work with if usrPlan , ok := ctx . Get ( \"User.plan\" ); ok { switch pln := usrPlan .( type ) { case gre . String : fmt . Println ( \"fact type (string):\" , pln . Value ()) case gre . Number : fmt . Println ( \"fact type (number):\" , pln . Value ()) } } // get the fact's parent object to access it and use other fields that are not facts. if usr , ok := ctx . GetObject ( \"User\" ); ok { fmt . Println ( obj .( * User ). Email ) } } Facts inference Sometimes is needed performing an inference due to a facts change. The given context into the onActivation handler will let you update facts in a thread-safe manner calling the cnotext method Feedback . Please refer to Context section for more details.","title":"Activation function"},{"location":"starthere.html#error-handler","text":"If for some reason the evaluation ran into an error this callback function will be called letting you know about the error. 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"fmt\" \"log\" gre \"github.com/darksubmarine/goldfish-re\" ) func errorHandler ( err error ) { // do something with the error log . Println ( err ) }","title":"Error handler"},{"location":"starthere.html#facts-as-struct-fields","text":"Following the previous example we have an object User with 3 fields plan miles and status . Those attributes are the facts and can be defined into your go program as: 1 2 3 4 5 6 7 8 9 package main import gre \"github.com/darksubmarine/goldfish-re\" type User struct { plan gre . String miles gre . Number status gre . String } Where the struct name (User) matches with the fact object and the field name matches with the fact attribute. Also the data type must be set using the Goldfish-RE data types in order to trigger an evaluation each time that a value is updated.","title":"Facts as struct fields"},{"location":"starthere.html#go-annotation","text":"The library also supports Go tags to configure your facts. The tag must be written as: 1 gre:\"object=User,attribute=plan,value=silver\" where this is useful when you need to specify some custom values: object : defines the object name for the given fact, useful to overwrite the struct name. attribute : sets the attribute name for the given fact if you need a name different to the struct field value : the default value which the fact will be initialized. Possible values String : value=some string value Number : value=234 Float : value=73.2 Boolean : value=true Date : value=1984-12-24T00:00:00 1 2 3 4 5 6 7 8 9 package main import gre \"github.com/darksubmarine/goldfish-re\" type User struct { Plan gre . String `gre:\"attribute=plan,value=silver\"` Miles gre . Number `gre:\"attribute=miles,value=500\"` Status gre . String `gre:\"attribute=status,value=none\"` } Exported fields In order to use the Go tags to configure the facts, is mandatory exporting the fields otherwise the context registration will fail.","title":"Go annotation"},{"location":"starthere.html#context","text":"Once that you have a ruleset what do you need is a context to eval your facts against the ruleset. That means: A context is created from a ruleset: rs.Context() Each ruleset has only one context The facts are thread-safe into the same context via ctx.Update method The facts are not thread-safe between different context","title":"Context"},{"location":"starthere.html#register-facts","text":"In order to run evaluations against the ruleset each time that a Fact is updated, is required to register the facts into a Context. Register methods do not run a ruleset evaluation. Only register the facts with their zero / default values into the context. The evaluation happens when a context.Update is called and the facts are modified via a transaction Tx To do this the Context struct has some methods:","title":"Register facts"},{"location":"starthere.html#register-a-full-struct","text":"ctx.Register(obj interface{}) : This method is the most useful when you have a struct with facts to be registered. Also fetchs the tags and applies its configuration. Returns an error if the registration process fails. For instance: 1 2 3 4 5 6 7 8 9 10 type User struct { Plan gre . String `gre:\"attribute=plan,value=silver\"` Miles gre . Number `gre:\"attribute=miles,value=500\"` Status gre . String `gre:\"attribute=status,value=none\"` } usr := new ( User ) if err := ctx . Register ( usr ); err != nil { // error on registration }","title":"Register a full struct"},{"location":"starthere.html#register-field-by-field","text":"In addition to the Register method it is possible registering individual field with its data type: RegisterString(object interface{}, attribute String) RegisterNumber(object interface{}, attribute Number) RegisterFloat(object interface{}, attribute Float) RegisterBoolean(object interface{}, attribute Boolean) RegisterDate(object interface{}, attribute Date) For instance: 1 2 3 4 5 6 type User struct { Plan gre . String } usr := User { Plan : gre . NewString ( \"User\" , \"plan\" , \"gold\" )} ctx . RegisterString ( usr , usr . Plan )","title":"Register field by field"},{"location":"starthere.html#update-facts","text":"Each time that a fact or facts are updated a ruleset evaluation must be run in order to check if some variation activates any rule. The context object exposes a method to execute fact updates in a thread-safe mode. Each call is a locking call and returns the control when the success function ( onActivation ) has finished. Improving performance To improve performance your success function could be executed as a go routine. Have into account to copy the context facts if you need it because, to avoid degrade performance, are pointers to the main ruleset context. Calling context.Update you can update multiples facts at once in a transactional way and after that the evaluation will be trigger. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import ( gre \"github.com/darksubmarine/goldfish-re\" \"log\" ) func updateFacts () { if err := ctx . Update ( func ( tx * gre . Tx ) { tx . SetString ( usr . Status , \"active\" ) tx . SetNumber ( usr . Miles , 999 ) tx . Error ( errors . New ( \"something was wrong\" )) }); err != nil { log . Println ( err ) } } The ctx.Update executes a function where a tx *gre.Tx is a transaction object and let you perform transactional updates to your facts and exposes a tx.Error method in case that you would like to return a custom error to avoid run the ruleset evaluation. When an error is returned the transaction is not applied that means: fact changes are not updated (committed). If you need updating only one fact, the context object exposes individual methods for each data type. SetString(attribute interface{}, value string) error SetNumber(attribute interface{}, value int64) error SetFloat(attribute interface{}, value float64) error SetBoolean(attribute interface{}, value bool) error SetDate(attribute interface{}, value time.Time) error For instance: 1 2 3 if err := ctx . SetString ( usr . Status , \"VIP\" ); err != nil { log ( err ) } Blocking method The previous methods ( SetString, SetNumber, SetFloat, SetBoolean, SetDate ) are blocking methods that executes into a transaction meaning that in case of error the new value is not applied.","title":"Update facts"},{"location":"starthere.html#context-into-onactivation-handler","text":"The context into the activation handler contains all the previous registered facts, so all facts are accessible to read it or to write it. Also, the parent object to each fact can be accessed via the context. The exposed API methods are described below: Fact Getters: These methods are useful to fetch a fact object given the fact name. Get(fact string) (interface{}, bool) GetString(fact string) (String, error) GetNumber(fact string) (Number, error) GetFloat(fact string) (Float, error) GetBoolean(fact string) (Boolean, error) GetDate(fact string) (Date, error) Iteration over all facts into the context This method is useful when you need to run an iteration over all facts into the context. An iteration function must be provided with 2 parameters: fact which is the fact name like User.plan and its value which in this case is an interface to match with all possible data types. ForEach(fn func(fact string, value interface{})) Parent Object Getter This method fetch the parent object that contains a fact. GetObject(object string) (interface{}, bool) Fact Inference (feedback) Sometimes when we are working with a ruleset where some facts depend on other facts is needed an inference mechanism. In this case we called Feedback due to each feedback will trigger a ruleset re-evaluation. The Feedback function is transactional, thread-safe, and it is called from the context.Update life cycle. If the tx.Error() is executed into the Feedback method the error will be accessible as outcome of context.Update . Feedback(func(tx *Tx)) Advanced example Please check the advanced example app into the goldfish-re repo to see it in action!","title":"Context into onActivation handler"}]}